package ObjectType.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractMethod = 0;
  public static final int AbstractProperty = 1;
  public static final int AbstractPropertyReference = 2;
  public static final int Assignment = 3;
  public static final int DateType = 4;
  public static final int EventType = 5;
  public static final int Expression = 6;
  public static final int IMandatory = 7;
  public static final int ISetDefaultToday = 8;
  public static final int Inheritance = 9;
  public static final int InputProperty = 10;
  public static final int InputPropertyReference = 11;
  public static final int Method = 12;
  public static final int OET = 13;
  public static final int ObjectEventModel = 14;
  public static final int ObjectType = 15;
  public static final int Property = 16;
  public static final int PropertyType = 17;
  public static final int Relation = 18;
  public static final int StringType = 19;
  public static final int ValidFromPoperty = 20;
  public static final int ValidToPoperty = 21;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x2f2b62d8f25248ccL, 0x8e79f44966765664L);
    builder.put(0x309151bb67298e3eL, AbstractMethod);
    builder.put(0x53eb98c308dd6c5cL, AbstractProperty);
    builder.put(0x53eb98c308e23c29L, AbstractPropertyReference);
    builder.put(0x40f5cd89acfdd152L, Assignment);
    builder.put(0x53eb98c308e0d118L, DateType);
    builder.put(0x53eb98c308e17cfbL, EventType);
    builder.put(0x40f5cd89acfdd155L, Expression);
    builder.put(0x1c78e324224d159dL, IMandatory);
    builder.put(0x3b484aadf59296fcL, ISetDefaultToday);
    builder.put(0x45a92bc2566cc9ffL, Inheritance);
    builder.put(0x3b484aadf59a7833L, InputProperty);
    builder.put(0x40f5cd89acfdd157L, InputPropertyReference);
    builder.put(0x53eb98c308e23c22L, Method);
    builder.put(0x53eb98c308e69c16L, OET);
    builder.put(0x53eb98c30915f01aL, ObjectEventModel);
    builder.put(0x53eb98c308d9b120L, ObjectType);
    builder.put(0x53eb98c308d9b121L, Property);
    builder.put(0x53eb98c308e0d116L, PropertyType);
    builder.put(0x53eb98c308dae2f3L, Relation);
    builder.put(0x53eb98c308e0d117L, StringType);
    builder.put(0x53eb98c308e0d119L, ValidFromPoperty);
    builder.put(0x53eb98c308e0d11cL, ValidToPoperty);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
