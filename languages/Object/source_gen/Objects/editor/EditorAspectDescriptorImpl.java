package Objects.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import jetbrains.mps.openapi.editor.descriptor.EditorHintsProvider;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;
import java.util.Arrays;
import jetbrains.mps.editor.runtime.desctiptor.ConceptEditorHintImpl;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase implements EditorHintsProvider {
  private Collection<ConceptEditorHint> myHints = Arrays.<ConceptEditorHint>asList(new ConceptEditorHintImpl("table", "", true, "Objects.editor.ObjectsHints.table"));
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (index_xbvbvu_a0b.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new DateValue_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Event_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new InputPropertyValue_Editor());
      case 3:
        return Arrays.asList(new ConceptEditor[]{new ObjectInstance_Editor(), new ObjectInstance_table_Editor()});
      case 4:
        return Collections.<ConceptEditor>singletonList(new ObjectInstanceValue_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Property_table_Editor());
      case 6:
        return Arrays.asList(new ConceptEditor[]{new PropertyValue_Editor(), new PropertyValue_table_Editor()});
      case 7:
        return Collections.<ConceptEditor>singletonList(new Relation_table_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new SetObjectInstances_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new StringValue_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new ValidFromPoperty_table_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new ValidToPoperty_table_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  public Collection<ConceptEditorHint> getHints() {
    return myHints;
  }


  private static final ConceptSwitchIndex index_xbvbvu_a0b = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x309151bb6753ecc8L), MetaIdFactory.conceptId(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x24097a55b88d7404L), MetaIdFactory.conceptId(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x24097a55b88d050bL), MetaIdFactory.conceptId(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x53eb98c308da284cL), MetaIdFactory.conceptId(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x309151bb67599d18L), MetaIdFactory.conceptId(0x2f2b62d8f25248ccL, 0x8e79f44966765664L, 0x53eb98c308d9b121L), MetaIdFactory.conceptId(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x309151bb6753eb39L), MetaIdFactory.conceptId(0x2f2b62d8f25248ccL, 0x8e79f44966765664L, 0x53eb98c308dae2f3L), MetaIdFactory.conceptId(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x309151bb67587108L), MetaIdFactory.conceptId(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x309151bb6753ecb1L), MetaIdFactory.conceptId(0x2f2b62d8f25248ccL, 0x8e79f44966765664L, 0x53eb98c308e0d119L), MetaIdFactory.conceptId(0x2f2b62d8f25248ccL, 0x8e79f44966765664L, 0x53eb98c308e0d11cL)).seal();
}
