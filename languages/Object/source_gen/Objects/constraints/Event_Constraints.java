package Objects.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import DateTime.behavior.Date__BehaviorDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;

public class Event_Constraints extends BaseConstraintsDescriptor {
  public Event_Constraints() {
    super(MetaAdapterFactory.getConcept(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x24097a55b88d7404L, "Objects.structure.Event"));
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(MetaAdapterFactory.getReferenceLink(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x24097a55b88d7404L, 0x24097a55b88d7405L, "eventType"), new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x24097a55b88d7404L, 0x24097a55b88d7405L), this) {
      @Override
      public boolean hasOwnOnReferenceSetHandler() {
        return true;
      }
      @Override
      public boolean validate(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        return true;
      }
      @Override
      public void onReferenceSet(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        for (SNode method : ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(referenceNode, MetaAdapterFactory.getReferenceLink(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x24097a55b88d7404L, 0x24097a55b88d7405L, "eventType")), MetaAdapterFactory.getConcept(0x2f2b62d8f25248ccL, 0x8e79f44966765664L, 0x53eb98c30915f01aL, "ObjectType.structure.ObjectEventModel"), false, false), MetaAdapterFactory.getConcept(0x2f2b62d8f25248ccL, 0x8e79f44966765664L, 0x53eb98c308e23c22L, "ObjectType.structure.Method"), false, new SAbstractConcept[]{}))) {
          if (SLinkOperations.getTarget(method, MetaAdapterFactory.getReferenceLink(0x2f2b62d8f25248ccL, 0x8e79f44966765664L, 0x53eb98c308e23c22L, 0x53eb98c308e23c23L, "event")) == SLinkOperations.getTarget(referenceNode, MetaAdapterFactory.getReferenceLink(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x24097a55b88d7404L, 0x24097a55b88d7405L, "eventType"))) {
            for (SNode property : ListSequence.fromList(SLinkOperations.getChildren(method, MetaAdapterFactory.getContainmentLink(0x2f2b62d8f25248ccL, 0x8e79f44966765664L, 0x53eb98c308e23c22L, 0x53eb98c308e23c2fL, "properties")))) {
              SNode inputPropertyValue = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x24097a55b88d050bL, "Objects.structure.InputPropertyValue"));
              SLinkOperations.setTarget(inputPropertyValue, MetaAdapterFactory.getReferenceLink(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x24097a55b88d050bL, 0x24097a55b88d050cL, "inputProperty"), property);
              {
                final SNode setDefaultToday = property;
                if (SNodeOperations.isInstanceOf(setDefaultToday, MetaAdapterFactory.getInterfaceConcept(0x2f2b62d8f25248ccL, 0x8e79f44966765664L, 0x3b484aadf59296fcL, "ObjectType.structure.ISetDefaultToday"))) {
                  if (SPropertyOperations.getBoolean(setDefaultToday, MetaAdapterFactory.getProperty(0x2f2b62d8f25248ccL, 0x8e79f44966765664L, 0x3b484aadf59296fcL, 0x3b484aadf59296fdL, "setDefaultToday"))) {
                    SNodeFactoryOperations.setNewChild(inputPropertyValue, MetaAdapterFactory.getContainmentLink(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x24097a55b88d050bL, 0x24097a55b88d050eL, "value"), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x309151bb6753ecc8L, "Objects.structure.DateValue")));
                    {
                      final SNode dateValue = SLinkOperations.getTarget(inputPropertyValue, MetaAdapterFactory.getContainmentLink(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x24097a55b88d050bL, 0x24097a55b88d050eL, "value"));
                      if (SNodeOperations.isInstanceOf(dateValue, MetaAdapterFactory.getConcept(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x309151bb6753ecc8L, "Objects.structure.DateValue"))) {
                        SNodeFactoryOperations.setNewChild(dateValue, MetaAdapterFactory.getContainmentLink(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x309151bb6753ecc8L, 0x309151bb6753ecc9L, "value"), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x2bc0050f69d04772L, 0x99033735cb700947L, 0x53eb98c308d9b15eL, "DateTime.structure.Date")));
                        Date__BehaviorDescriptor.setToNow_id3H8iERP_wVY.invoke(SLinkOperations.getTarget(dateValue, MetaAdapterFactory.getContainmentLink(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x309151bb6753ecc8L, 0x309151bb6753ecc9L, "value")));
                      }
                    }
                  }
                }
              }
              ListSequence.fromList(SLinkOperations.getChildren(referenceNode, MetaAdapterFactory.getContainmentLink(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x24097a55b88d7404L, 0x24097a55b88d740bL, "inputPropertyValue"))).addElement(inputPropertyValue);
            }
          }
        }
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {};
      }
    });
    return references;
  }
}
