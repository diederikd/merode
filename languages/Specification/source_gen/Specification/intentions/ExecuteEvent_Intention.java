package Specification.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionDescriptorBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.IntentionExecutableBase;
import Specification.behavior.Simulation;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public final class ExecuteEvent_Intention extends IntentionDescriptorBase implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ExecuteEvent_Intention() {
    super(MetaAdapterFactory.getConcept(0xcab25696e7a84bc6L, 0x80eb639299db8d07L, 0x24097a55b88d7404L, "Objects.structure.Event"), IntentionType.NORMAL, false, new SNodePointer("r:6fa1bcc9-d82c-4de2-afda-888a9e7f5319(Specification.intentions)", "2051639374601829916"));
  }
  @Override
  public String getPresentation() {
    return "ExecuteEvent";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ExecuteEvent_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends IntentionExecutableBase {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Execute Event";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      Simulation.executeEvent(node, SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(node, MetaAdapterFactory.getConcept(0x40b7f9cd2341434aL, 0xa23eae796e75a4d8L, 0x24097a55b88d0492L, "Specification.structure.Events"), false, false), MetaAdapterFactory.getReferenceLink(0x40b7f9cd2341434aL, 0xa23eae796e75a4d8L, 0x24097a55b88d0492L, 0x1c78e3242258e2b0L, "belongfTo")));
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return ExecuteEvent_Intention.this;
    }
  }
}
